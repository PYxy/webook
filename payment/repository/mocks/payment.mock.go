// Code generated by MockGen. DO NOT EDIT.
// Source: types.go
//
// Generated by this command:
//
//	mockgen -source=types.go -destination=mocks/payment.mock.go --package=repomocks PaymentRepository
//
// Package repomocks is a generated GoMock package.
package repomocks

import (
	context "context"
	reflect "reflect"
	time "time"

	domain "gitee.com/geekbang/basic-go/webook/payment/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentRepository is a mock of PaymentRepository interface.
type MockPaymentRepository struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryMockRecorder
}

// MockPaymentRepositoryMockRecorder is the mock recorder for MockPaymentRepository.
type MockPaymentRepositoryMockRecorder struct {
	mock *MockPaymentRepository
}

// NewMockPaymentRepository creates a new mock instance.
func NewMockPaymentRepository(ctrl *gomock.Controller) *MockPaymentRepository {
	mock := &MockPaymentRepository{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepository) EXPECT() *MockPaymentRepositoryMockRecorder {
	return m.recorder
}

// AddPayment mocks base method.
func (m *MockPaymentRepository) AddPayment(ctx context.Context, pmt domain.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPayment", ctx, pmt)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPayment indicates an expected call of AddPayment.
func (mr *MockPaymentRepositoryMockRecorder) AddPayment(ctx, pmt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPayment", reflect.TypeOf((*MockPaymentRepository)(nil).AddPayment), ctx, pmt)
}

// FindExpiredPayment mocks base method.
func (m *MockPaymentRepository) FindExpiredPayment(ctx context.Context, offset, limit int, t time.Time) ([]domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindExpiredPayment", ctx, offset, limit, t)
	ret0, _ := ret[0].([]domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindExpiredPayment indicates an expected call of FindExpiredPayment.
func (mr *MockPaymentRepositoryMockRecorder) FindExpiredPayment(ctx, offset, limit, t any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindExpiredPayment", reflect.TypeOf((*MockPaymentRepository)(nil).FindExpiredPayment), ctx, offset, limit, t)
}

// GetPayment mocks base method.
func (m *MockPaymentRepository) GetPayment(ctx context.Context, bizTradeNO string) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayment", ctx, bizTradeNO)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayment indicates an expected call of GetPayment.
func (mr *MockPaymentRepositoryMockRecorder) GetPayment(ctx, bizTradeNO any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayment", reflect.TypeOf((*MockPaymentRepository)(nil).GetPayment), ctx, bizTradeNO)
}

// UpdatePayment mocks base method.
func (m *MockPaymentRepository) UpdatePayment(ctx context.Context, pmt domain.Payment) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePayment", ctx, pmt)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdatePayment indicates an expected call of UpdatePayment.
func (mr *MockPaymentRepositoryMockRecorder) UpdatePayment(ctx, pmt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePayment", reflect.TypeOf((*MockPaymentRepository)(nil).UpdatePayment), ctx, pmt)
}
