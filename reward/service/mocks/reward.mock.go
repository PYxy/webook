// Code generated by MockGen. DO NOT EDIT.
// Source: ./types.go
//
// Generated by this command:
//
//	mockgen -source=./types.go -destination=mocks/reward.mock.go -package=svcmocks RewardService
//
// Package svcmocks is a generated GoMock package.
package svcmocks

import (
	context "context"
	reflect "reflect"

	domain "gitee.com/geekbang/basic-go/webook/reward/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockRewardService is a mock of RewardService interface.
type MockRewardService struct {
	ctrl     *gomock.Controller
	recorder *MockRewardServiceMockRecorder
}

// MockRewardServiceMockRecorder is the mock recorder for MockRewardService.
type MockRewardServiceMockRecorder struct {
	mock *MockRewardService
}

// NewMockRewardService creates a new mock instance.
func NewMockRewardService(ctrl *gomock.Controller) *MockRewardService {
	mock := &MockRewardService{ctrl: ctrl}
	mock.recorder = &MockRewardServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRewardService) EXPECT() *MockRewardServiceMockRecorder {
	return m.recorder
}

// PreReward mocks base method.
func (m *MockRewardService) PreReward(ctx context.Context, r domain.Reward) (string, int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PreReward", ctx, r)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(int64)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// PreReward indicates an expected call of PreReward.
func (mr *MockRewardServiceMockRecorder) PreReward(ctx, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PreReward", reflect.TypeOf((*MockRewardService)(nil).PreReward), ctx, r)
}
