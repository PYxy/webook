// 设计并实现了一个高可用的短信平台
// 1. 提高可用性：重试机制、客户端限流、failover（轮询，实时检测）
// 	1.1 实时检测：
// 	1.1.1 基于超时的实时检测（连续超时）
// 	1.1.2 基于响应时间的实时检测（比如说，平均响应时间上升 20%）
//  1.1.3 基于长尾请求的实时检测（比如说，响应时间超过 1s 的请求占比超过了 10%）
//  1.1.4 错误率


当前设计描述
1.正常请求流向:
   1.流向异常设备*有概率(用户设定 Random接口) 检测异常设备的状态恢复)
     注意: 1.当前的检测服务必须请求才能判断是否正常(可以默认定义一个测试的数据包去探测会更好)
           2.如果是硬件指标是不需要的这样做的(cpu 内存 磁盘、网络IO 连接数 等)
           3.尽可能使用同一个异常设备(加快异常设备变为正常设备)(这里的代码 不确定写的对不对service.go 98到112行)
           4.如果在异常情况下 继续处理异常的情况, 下次就跳过它 ,处理下一个异常实例
   2.流向正常设备

   无论流向那里  异常马上入库，等待异步重试

2.设备的检测
   1.异常的设备
     接受指定个数的测试流量才允许做检测(并锁死一个时间窗口,避免长时间没有请求,把过期的删掉了)
     注意:
       异常转为正常 之后 会提供一个承接流量的比例(不会全部接收),处理成功一个就加分,失败不扣分,

   2.正常的设备
     按照指定的判断规则 去修改设备状态

3.异步重试
  不判断后端服务是否正确直接使用,加快异常设备恢复正常的时间