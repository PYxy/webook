// Code generated by MockGen. DO NOT EDIT.
// Source: F:\git_push\webook\internal\web\jwt.go

// Package jwtmocks is a generated GoMock package.
package jwtmocks

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockJWT is a mock of JWT interface.
type MockJWT struct {
	ctrl     *gomock.Controller
	recorder *MockJWTMockRecorder
}

// MockJWTMockRecorder is the mock recorder for MockJWT.
type MockJWTMockRecorder struct {
	mock *MockJWT
}

// NewMockJWT creates a new mock instance.
func NewMockJWT(ctrl *gomock.Controller) *MockJWT {
	mock := &MockJWT{ctrl: ctrl}
	mock.recorder = &MockJWTMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJWT) EXPECT() *MockJWTMockRecorder {
	return m.recorder
}

// Decrypt mocks base method.
func (m *MockJWT) Decrypt(tokenStr string) (interface{}, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", tokenStr)
	ret0, _ := ret[0].(interface{})
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockJWTMockRecorder) Decrypt(tokenStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockJWT)(nil).Decrypt), tokenStr)
}

// Encryption mocks base method.
func (m *MockJWT) Encryption(arg0 map[string]string) (string, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encryption", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Encryption indicates an expected call of Encryption.
func (mr *MockJWTMockRecorder) Encryption(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encryption", reflect.TypeOf((*MockJWT)(nil).Encryption), arg0)
}
